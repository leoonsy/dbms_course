{"version":3,"sources":["scripts/main.min.js"],"names":["$","res","baseApiPath","acl","ajax","url","method","dataType","getReference","success","data","reference","categories","index","title","type","locked","editable","width","getNamesFromRef","resizable","sortable","update","tbar","action","key","text","tip","emptyText","paramsMenu","paramsText","tbarProducts","JSON","parse","stringify","tbarOrders","pageSizeData","clicksToEdit","grid","FancyTab","renderTo","items","selModel","proxy","afterRequest","beforeRequest","defaults","cols","updateAfterRequest","i18n","columns","paging","concat","updateBeforeRequest","products","orders","customers","tbarCustomers","getAcl","async","tableName","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","push","name","err","getNameById","id","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","getIdByName","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","changeIdToName","o","response","Array","isArray","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","activeTab","i","length","load","params"],"mappings":"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","file":"main.min.js","sourcesContent":["$(function () {\r\n    let baseApiPath = \"core/api.php\";\r\n    let acl = getAcl();\r\n    let reference = getReference();\r\n\r\n    let cols = {\r\n        categories: [{\r\n            index: 'id',\r\n            title: 'ID',\r\n            type: 'number',\r\n            locked: true,\r\n            width: 50,\r\n            editable: false\r\n        }, {\r\n            index: 'name',\r\n            title: 'Имя',\r\n            type: 'string',\r\n            width: 200\r\n        }],\r\n        products: [{\r\n            index: 'id',\r\n            title: 'ID',\r\n            type: 'number',\r\n            locked: true,\r\n            width: 50,\r\n            editable: false\r\n        }, {\r\n            index: 'category_id',\r\n            title: 'Категория',\r\n            type: 'combo',\r\n            data: getNamesFromRef('categories'),\r\n            width: 150\r\n        }, {\r\n            index: 'name',\r\n            title: 'Имя',\r\n            type: 'string',\r\n            width: 200\r\n        }, {\r\n            index: 'price',\r\n            title: 'Цена',\r\n            type: 'number',\r\n            width: 80\r\n        }, {\r\n            index: 'count',\r\n            title: 'Количество',\r\n            type: 'string',\r\n            width: 90\r\n        }],\r\n        orders: [{\r\n            index: 'id',\r\n            title: 'ID',\r\n            type: 'number',\r\n            locked: true,\r\n            width: 50,\r\n            editable: false\r\n        }, {\r\n            index: 'customer_id',\r\n            title: 'Покупатель',\r\n            type: 'combo',\r\n            data: getNamesFromRef('customers'),\r\n            width: 140\r\n        }, {\r\n            index: 'product_id',\r\n            title: 'Товар',\r\n            type: 'combo',\r\n            data: getNamesFromRef('products'),\r\n            width: 160\r\n        }, {\r\n            index: 'product_count',\r\n            title: 'Количество товаров',\r\n            type: 'number',\r\n            width: 150\r\n        }, {\r\n            index: 'price',\r\n            title: 'Цена',\r\n            type: 'number',\r\n            width: 80\r\n        }],\r\n        customers: [{\r\n            index: 'id',\r\n            title: 'ID',\r\n            type: 'number',\r\n            locked: true,\r\n            width: 50,\r\n            editable: false\r\n        }, {\r\n            index: 'first_name',\r\n            title: 'Имя',\r\n            type: 'string'\r\n        }, {\r\n            index: 'last_name',\r\n            title: 'Фамилия',\r\n            type: 'string'\r\n        }]\r\n    };\r\n\r\n    let defaults = {\r\n        type: 'string',\r\n        width: 150,\r\n        resizable: true,\r\n        sortable: true,\r\n        editable: acl.update\r\n    }\r\n\r\n    let tbar = [{\r\n        key: 'insert',\r\n        text: 'Добавить',\r\n        action: 'add'\r\n    }, {\r\n        key: 'delete',\r\n        text: 'Удалить',\r\n        action: 'remove',\r\n        tip: 'Выделите строки для удаления'\r\n    }, {\r\n        key: 'search',\r\n        type: 'search',\r\n        width: 350,\r\n        emptyText: 'Поиск',\r\n        paramsMenu: true,\r\n        paramsText: 'Параметры'\r\n    }];\r\n\r\n    //отключаем кнопки в зависимости от прав доступа\r\n    tbar = tbar.filter((item, index, array) => {\r\n        return !(acl[item.key] === false);\r\n    });\r\n\r\n    //кнопки должны быть в отдельной памяти для каждой таблицы (так как привязывается к таблице)\r\n    let tbarProducts = JSON.parse(JSON.stringify(tbar));\r\n    let tbarOrders = JSON.parse(JSON.stringify(tbar));\r\n    let tbarCustomers = JSON.parse(JSON.stringify(tbar));\r\n\r\n    let paging = {\r\n        pageSize: 20,\r\n        pageSizeData: [5, 10, 20, 50, 100, 500, 1000]\r\n    };\r\n\r\n    let clicksToEdit = 2,\r\n        i18n = 'ru';\r\n\r\n    let grid = new FancyTab({\r\n        resizable: false,\r\n        renderTo: 'mainTable',\r\n        title: 'База данных компьютерного магазина',\r\n        height: 650,\r\n        trackOver: true,\r\n        items: [{\r\n            title: 'Категории',\r\n            selModel: 'rows',\r\n            type: 'grid',\r\n            data: {\r\n                proxy: {\r\n                    type: 'rest',\r\n                    url: `${baseApiPath}?table=categories`,\r\n                    afterRequest: updateAfterRequest,\r\n                    beforeRequest: updateBeforeRequest\r\n                }\r\n            },\r\n            defaults: defaults,\r\n            columns: cols.categories,\r\n            tbar: tbar,\r\n            clicksToEdit: clicksToEdit,\r\n            paging: paging,\r\n            i18n: i18n\r\n        },\r\n        {\r\n            title: 'Продукты',\r\n            selModel: 'rows',\r\n            type: 'grid',\r\n            data: {\r\n                proxy: {\r\n                    type: 'rest',\r\n                    url: `${baseApiPath}?table=products`,\r\n                    afterRequest: updateAfterRequest,\r\n                    beforeRequest: updateBeforeRequest\r\n                }\r\n            },\r\n            defaults: defaults,\r\n            columns: cols.products,\r\n            tbar: tbarProducts,\r\n            clicksToEdit: clicksToEdit,\r\n            paging: paging,\r\n            i18n: i18n\r\n        },\r\n        {\r\n            title: 'Заказы',\r\n            selModel: 'rows',\r\n            type: 'grid',\r\n            data: {\r\n                proxy: {\r\n                    type: 'rest',\r\n                    url: `${baseApiPath}?table=orders`,\r\n                    afterRequest: updateAfterRequest,\r\n                    beforeRequest: updateBeforeRequest\r\n                }\r\n            },\r\n            defaults: defaults,\r\n            columns: cols.orders,\r\n            tbar: tbarOrders,\r\n            clicksToEdit: clicksToEdit,\r\n            paging: paging,\r\n            i18n: i18n\r\n        },\r\n        {\r\n            title: 'Покупатели',\r\n            selModel: 'rows',\r\n            type: 'grid',\r\n            data: {\r\n                proxy: {\r\n                    type: 'rest',\r\n                    url: `${baseApiPath}?table=customers`,\r\n                    afterRequest: updateAfterRequest,\r\n                    beforeRequest: updateBeforeRequest\r\n                }\r\n            },\r\n            defaults: defaults,\r\n            columns: cols.customers,\r\n            tbar: tbarCustomers,\r\n            clicksToEdit: clicksToEdit,\r\n            paging: paging,\r\n            i18n: i18n\r\n        }\r\n        ]\r\n    })\r\n\r\n    /**\r\n     * Получает права для управления таблицей\r\n     */\r\n    function getAcl() {\r\n        let res;\r\n        $.ajax({\r\n            url: 'core/api.php?acl',\r\n            method: 'get',\r\n            dataType: 'json',\r\n            async: false,\r\n            success: (data) => {\r\n                res = data;\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Получает соответствия id и name для таблиц\r\n     */\r\n    function getReference() {\r\n        let res;\r\n        $.ajax({\r\n            url: 'core/api.php?reference',\r\n            method: 'get',\r\n            dataType: 'json',\r\n            async: false,\r\n            success: (data) => {\r\n                res = data;\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Возвращает имена для combobox\r\n     * \r\n     * @param {string} tableName \r\n     */\r\n    function getNamesFromRef(tableName) {\r\n        let data = [];\r\n        for (let row of reference[tableName])\r\n            data.push(row.name);\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Получить имя записи из таблицы по id\r\n     * \r\n     * @param {number} id \r\n     * @param {string} tableName \r\n     */\r\n    function getNameById(id, tableName) {\r\n        //todo: сделать из reference словарь для более быстрого поиска\r\n        for (let row of reference[tableName])\r\n            if (row.id == id)\r\n                return row.name;\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Получить id из таблицы по имени записи\r\n     * \r\n     * @param {string} name \r\n     * @param {string} tableName \r\n     */\r\n    function getIdByName(name, tableName) {\r\n        //todo: сделать из reference словарь для более быстрого поиска\r\n        for (let row of reference[tableName])\r\n            if (row.name == name)\r\n                return row.id;\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Изменить id на имя\r\n     * \r\n     * @param {object} row - объект для изменения\r\n     */\r\n    function changeIdToName(row) {\r\n        if (row['customer_id'])\r\n            row['customer_id'] = getNameById(row['customer_id'], 'customers');\r\n\r\n        if (row['product_id'])\r\n            row['product_id'] = getNameById(row['product_id'], 'products');\r\n\r\n        if (row['category_id'])\r\n            row['category_id'] = getNameById(row['category_id'], 'categories');\r\n    }\r\n\r\n    /**\r\n     * Функция, вызываемая после получения ответа от сервера\r\n     * \r\n     * @param {object} o объект, содержащий информацию о типе запроса и ответ сервера\r\n     * @param {string} o.type тип запроса (create/read/update/delete)\r\n     * @param {object} o.response ответ от сервера\r\n     */\r\n    function updateAfterRequest(o) {\r\n        if (o.type != 'read')\r\n            reference = getReference(); //todo: заменить на локальное изменение для повышения производительности\r\n\r\n        //заменяет id на name (для удобства пользователя)\r\n        if (o.response.data) {\r\n            if (Array.isArray(o.response.data))\r\n                for (let row of o.response.data)\r\n                    changeIdToName(row);        \r\n            else\r\n                changeIdToName(o.response.data);\r\n        }\r\n\r\n        //обновляет вкладки (кроме текущей) после удаления строк\r\n        if (o.type == 'destroy' || o.type == 'update') {\r\n            let activeTab = grid.activeTab;\r\n            if (activeTab != 0 && activeTab != 3) //рассматриваем только \"категории\" и \"покупатели\" (для оптимизации)\r\n                return o;\r\n\r\n            for (let i = 0; i < grid.items.length; i++) {\r\n                if (i != activeTab && grid.items[i].load != undefined) {\r\n                    grid.items[i].load(); //запрос к серверу для получения данных\r\n                }\r\n            }\r\n        }\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Функция, вызываемая до отправки запроса таблицы к серверу\r\n     * \r\n     * @param {object} o объект, содержащий информацию о типе запроса и его параметрах \r\n     * @param {string} o.type тип запроса (create/read/update/delete)\r\n     * @param {object} o.params параметры запроса к серверу\r\n     * @param {object} o.headers заголовки запроса к серверу\r\n     */\r\n    function updateBeforeRequest(o) {\r\n        switch (o.params.key) {\r\n            case 'customer_id':\r\n                o.params.value = getIdByName(o.params.value, 'customers');\r\n                break;\r\n            case 'product_id':\r\n                o.params.value = getIdByName(o.params.value, 'products');\r\n                break;\r\n            case 'category_id':\r\n                o.params.value = getIdByName(o.params.value, 'categories');\r\n                break;\r\n        }\r\n\r\n        return o;\r\n    }\r\n});"]}